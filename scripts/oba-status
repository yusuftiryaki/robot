#!/bin/bash
# -*- coding: utf-8 -*-
#
# Otonom Bah√ße Asistanƒ± (OBA) - Durum Kontrol Scripti
# =========================================
#
# Bu script robotun mevcut durumunu kontrol eder.
#

# Proje ana dizinine git
cd "$(dirname "$0")/.."

# Ortam tespiti
IS_DEV_CONTAINER=false
IS_SIMULATION=false

# Python environment manager ile ortam tespit et
ENV_INFO=$(python3 -c "
import sys
sys.path.insert(0, 'src')
try:
    from core.environment_manager import EnvironmentManager
    env = EnvironmentManager()
    print('DEV_CONTAINER' if env.is_dev_container() else 'OTHER')
    print('SIMULATION' if env.is_simulation_mode else 'HARDWARE')
except Exception as e:
    print('OTHER')
    print('UNKNOWN')
" 2>/dev/null)

# Sonu√ßlarƒ± parse et
if [[ -n "$ENV_INFO" ]]; then
    env_type=$(echo "$ENV_INFO" | head -1)
    sim_mode=$(echo "$ENV_INFO" | tail -1)

    if [[ "$env_type" == "DEV_CONTAINER" ]]; then
        IS_DEV_CONTAINER=true
    fi

    if [[ "$sim_mode" == "SIMULATION" ]]; then
        IS_SIMULATION=true
    fi
fi

# Renk kodlarƒ±
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Banner
echo -e "${CYAN}"
echo "üìä ROBOT DURUM KONTROL"
echo "======================"
echo -e "${NC}"

# Parametreyi kontrol et
CHECK_TYPE="all"

for arg in "$@"; do
    case $arg in
        battery|bat)
            CHECK_TYPE="battery"
            echo -e "${BLUE}üîã Batarya durumu kontrol edilecek${NC}"
            ;;
        gps)
            CHECK_TYPE="gps"
            echo -e "${BLUE}üìç GPS durumu kontrol edilecek${NC}"
            ;;
        sensors|sensor)
            CHECK_TYPE="sensors"
            echo -e "${BLUE}üì° Sens√∂r durumu kontrol edilecek${NC}"
            ;;
        network|net)
            CHECK_TYPE="network"
            echo -e "${BLUE}üåê Aƒü durumu kontrol edilecek${NC}"
            ;;
        system|sys)
            CHECK_TYPE="system"
            echo -e "${BLUE}‚öôÔ∏è Sistem durumu kontrol edilecek${NC}"
            ;;
        logs)
            CHECK_TYPE="logs"
            echo -e "${BLUE}üìù Log durumu kontrol edilecek${NC}"
            ;;
        help|-h|--help)
            echo "Kullanƒ±m: oba-status [kontrol tipi]"
            echo ""
            echo "Kontrol Tipleri:"
            echo "  battery, bat      Batarya durumu"
            echo "  gps               GPS durumu"
            echo "  sensors, sensor   Sens√∂r durumu"
            echo "  network, net      Aƒü durumu"
            echo "  system, sys       Sistem durumu"
            echo "  logs              Log durumu"
            echo "  help              Bu yardƒ±mƒ± g√∂ster"
            echo ""
            echo "√ñrnekler:"
            echo "  oba-status            Genel durum"
            echo "  oba-status battery    Sadece batarya"
            echo "  oba-status gps        Sadece GPS"
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå Bilinmeyen parametre: $arg${NC}"
            echo "Yardƒ±m i√ßin: oba-status help"
            exit 1
            ;;
    esac
done

# Yardƒ±mcƒ± fonksiyonlar
check_service_status() {
    local service_name=$1
    if systemctl is-active --quiet "$service_name" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ $service_name aktif${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $service_name aktif deƒüil${NC}"
        return 1
    fi
}

check_file_age() {
    local file_path=$1
    local max_age_minutes=$2
    local description=$3

    if [[ -f "$file_path" ]]; then
        local file_age_minutes=$(( ($(date +%s) - $(stat -c %Y "$file_path")) / 60 ))
        if [[ $file_age_minutes -le $max_age_minutes ]]; then
            echo -e "${GREEN}‚úÖ $description g√ºncel (${file_age_minutes} dk √∂nce)${NC}"
            return 0
        else
            echo -e "${YELLOW}‚ö†Ô∏è $description eski (${file_age_minutes} dk √∂nce)${NC}"
            return 1
        fi
    else
        echo -e "${RED}‚ùå $description dosyasƒ± bulunamadƒ±${NC}"
        return 1
    fi
}

get_file_size() {
    local file_path=$1
    if [[ -f "$file_path" ]]; then
        du -h "$file_path" | cut -f1
    else
        echo "N/A"
    fi
}

# Ana durum kontrol fonksiyonu
check_general_status() {
    echo -e "${CYAN}ü§ñ GENEL ROBOT DURUMU${NC}"
    echo "========================"

    # Python process kontrol√º
    if pgrep -f "main.py" > /dev/null; then
        local pid=$(pgrep -f "main.py")
        local runtime=$(ps -p $pid -o etime= | tr -d ' ')
        echo -e "${GREEN}‚úÖ Robot aktif (PID: $pid, S√ºre: $runtime)${NC}"
    else
        echo -e "${RED}‚ùå Robot √ßalƒ±≈ümƒ±yor${NC}"
    fi

    # Web server kontrol√º
    if curl -s http://localhost:5000 > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Web aray√ºz√º eri≈üilebilir${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Web aray√ºz√º eri≈üilemiyor${NC}"
    fi

    # Son aktivite kontrol√º
    check_file_age "logs/robot.log" 5 "Robot aktivitesi"

    echo ""
}

check_battery_status() {
    echo -e "${CYAN}üîã BATARYA DURUMU${NC}"
    echo "=================="

    # Dev container ortamƒ±nda a√ßƒ±klama
    if $IS_DEV_CONTAINER; then
        echo -e "${BLUE}‚ÑπÔ∏è Dev Container ortamƒ±nda batarya sim√ºlasyonu kullanƒ±lƒ±yor${NC}"
    fi

    # Batarya log dosyasƒ±nƒ± kontrol et
    local battery_log="logs/battery.log"
    if [[ -f "$battery_log" ]]; then
        local last_battery_line=$(tail -1 "$battery_log" 2>/dev/null)
        if [[ -n "$last_battery_line" ]]; then
            echo "üìä Son batarya verisi: $last_battery_line"
        fi
        check_file_age "$battery_log" 10 "Batarya verisi"
    else
        if $IS_DEV_CONTAINER; then
            echo -e "${BLUE}üéÆ Batarya log dosyasƒ± sim√ºlasyonda olu≈üturulacak${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è Batarya log dosyasƒ± bulunamadƒ±${NC}"
        fi
    fi

    # Raspberry Pi g√º√ß durumu (varsa)
    if [[ -f "/sys/class/power_supply/BAT0/capacity" ]]; then
        local capacity=$(cat /sys/class/power_supply/BAT0/capacity)
        if [[ $capacity -gt 80 ]]; then
            echo -e "${GREEN}‚úÖ Sistem bataryasƒ±: %$capacity${NC}"
        elif [[ $capacity -gt 20 ]]; then
            echo -e "${YELLOW}‚ö†Ô∏è Sistem bataryasƒ±: %$capacity${NC}"
        else
            echo -e "${RED}‚ùå Sistem bataryasƒ± d√º≈ü√ºk: %$capacity${NC}"
        fi
    fi

    # INA219 sens√∂r verisi (config'den kontrol)
    if grep -q "ina219" config/robot_config.yaml 2>/dev/null; then
        echo "üîå INA219 sens√∂r√º yapƒ±landƒ±rƒ±lmƒ±≈ü"
    fi

    echo ""
}

check_gps_status() {
    echo -e "${CYAN}üìç GPS DURUMU${NC}"
    echo "=============="

    # Dev container ortamƒ±nda a√ßƒ±klama
    if $IS_DEV_CONTAINER; then
        echo -e "${BLUE}‚ÑπÔ∏è Dev Container ortamƒ±nda GPS sim√ºlasyonu kullanƒ±lƒ±yor${NC}"
    fi

    # GPS device kontrol√º
    if [[ -c "/dev/ttyAMA0" ]]; then
        echo -e "${GREEN}‚úÖ GPS cihazƒ± mevcut (/dev/ttyAMA0)${NC}"
    elif [[ -c "/dev/ttyS0" ]]; then
        echo -e "${GREEN}‚úÖ GPS cihazƒ± mevcut (/dev/ttyS0)${NC}"
    else
        if $IS_DEV_CONTAINER; then
            echo -e "${BLUE}üéÆ GPS cihazƒ± sim√ºlasyonda (normal)${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è GPS cihazƒ± bulunamadƒ±${NC}"
        fi
    fi

    # GPS log dosyasƒ±nƒ± kontrol et
    local gps_log="logs/gps.log"
    if [[ -f "$gps_log" ]]; then
        local last_gps_line=$(tail -1 "$gps_log" 2>/dev/null)
        if [[ -n "$last_gps_line" ]]; then
            echo "üìä Son GPS verisi: $last_gps_line"
        fi
        check_file_age "$gps_log" 30 "GPS verisi"
    else
        if $IS_DEV_CONTAINER; then
            echo -e "${BLUE}üéÆ GPS log dosyasƒ± sim√ºlasyonda olu≈üturulacak${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è GPS log dosyasƒ± bulunamadƒ±${NC}"
        fi
    fi

    # GPS fix durumu simulation'dan
    if [[ -f "logs/navigation.log" ]]; then
        local gps_fix=$(grep -i "gps.*fix" logs/navigation.log | tail -1)
        if [[ -n "$gps_fix" ]]; then
            echo "üõ∞Ô∏è GPS Fix: $gps_fix"
        fi
    fi

    echo ""
}

check_sensors_status() {
    echo -e "${CYAN}üì° SENS√ñR DURUMU${NC}"
    echo "================="

    # Dev container ortamƒ±nda a√ßƒ±klama
    if $IS_DEV_CONTAINER; then
        echo -e "${BLUE}‚ÑπÔ∏è Dev Container ortamƒ±nda sens√∂r sim√ºlasyonu kullanƒ±lƒ±yor${NC}"
    fi

    # I2C cihazlarƒ± kontrol et
    if command -v i2cdetect &> /dev/null; then
        echo "üîç I2C cihazlarƒ± taranƒ±yor..."
        local i2c_devices=$(i2cdetect -y 1 2>/dev/null | grep -E '[0-9a-f]{2}' | wc -l)
        if [[ $i2c_devices -gt 0 ]]; then
            echo -e "${GREEN}‚úÖ $i2c_devices I2C cihazƒ± bulundu${NC}"
        else
            if $IS_DEV_CONTAINER; then
                echo -e "${BLUE}üéÆ I2C cihazlarƒ± sim√ºlasyonda (normal)${NC}"
            else
                echo -e "${YELLOW}‚ö†Ô∏è I2C cihazƒ± bulunamadƒ±${NC}"
            fi
        fi
    else
        if $IS_DEV_CONTAINER; then
            echo -e "${BLUE}üéÆ I2C ara√ßlarƒ± sim√ºlasyonda yok (normal)${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è I2C ara√ßlarƒ± y√ºkl√º deƒüil${NC}"
        fi
    fi

    # GPIO durumu
    if command -v gpio &> /dev/null; then
        echo "üîå GPIO durumu kontrol ediliyor..."
        # Kritik GPIO pinlerini kontrol et
        local gpio_ok=true
        for pin in 17 18 22 23; do
            if gpio read $pin &> /dev/null; then
                continue
            else
                gpio_ok=false
                break
            fi
        done

        if $gpio_ok; then
            echo -e "${GREEN}‚úÖ GPIO pinleri eri≈üilebilir${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è Bazƒ± GPIO pinleri eri≈üilemiyor${NC}"
        fi
    else
        if $IS_DEV_CONTAINER; then
            echo -e "${BLUE}üéÆ GPIO sim√ºlasyonda kullanƒ±lmƒ±yor (normal)${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è GPIO ara√ßlarƒ± y√ºkl√º deƒüil${NC}"
        fi
    fi

    # Sens√∂r log dosyalarƒ±nƒ± kontrol et
    if $IS_DEV_CONTAINER; then
        echo -e "${BLUE}üéÆ Sens√∂r log dosyalarƒ± sim√ºlasyonda olu≈üturulacak${NC}"
    else
        check_file_age "logs/sensors.log" 10 "Sens√∂r verisi"
        check_file_age "logs/imu.log" 15 "IMU verisi"
        # Ultrasonik sens√∂rler devre dƒ±≈üƒ±
    fi

    echo ""
}

check_network_status() {
    echo -e "${CYAN}üåê Aƒû DURUMU${NC}"
    echo "============="

    # ƒ∞nternet baƒülantƒ±sƒ±
    if ping -c 1 8.8.8.8 &> /dev/null; then
        echo -e "${GREEN}‚úÖ ƒ∞nternet baƒülantƒ±sƒ± mevcut${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è ƒ∞nternet baƒülantƒ±sƒ± yok${NC}"
    fi

    # Wi-Fi durumu
    if command -v iwgetid &> /dev/null; then
        local wifi_ssid=$(iwgetid -r 2>/dev/null)
        if [[ -n "$wifi_ssid" ]]; then
            echo -e "${GREEN}‚úÖ Wi-Fi baƒülƒ±: $wifi_ssid${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è Wi-Fi baƒülantƒ±sƒ± yok${NC}"
        fi
    fi

    # Local IP adresi
    local local_ip=$(hostname -I | awk '{print $1}')
    if [[ -n "$local_ip" ]]; then
        echo -e "${GREEN}‚úÖ Yerel IP: $local_ip${NC}"
        echo "üåç Web aray√ºz√º: http://$local_ip:5000"
    fi

    # SSH durumu
    if systemctl is-active --quiet ssh 2>/dev/null; then
        echo -e "${GREEN}‚úÖ SSH aktif${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è SSH aktif deƒüil${NC}"
    fi

    echo ""
}

check_system_status() {
    echo -e "${CYAN}‚öôÔ∏è Sƒ∞STEM DURUMU${NC}"
    echo "================="

    # CPU kullanƒ±mƒ±
    if command -v top &> /dev/null; then
        local cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1)
        if [[ $(echo "$cpu_usage < 80" | bc 2>/dev/null || echo "1") -eq 1 ]]; then
            echo -e "${GREEN}‚úÖ CPU kullanƒ±mƒ±: %$cpu_usage${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è Y√ºksek CPU kullanƒ±mƒ±: %$cpu_usage${NC}"
        fi
    fi

    # Bellek kullanƒ±mƒ±
    if command -v free &> /dev/null; then
        local memory_info=$(free | grep '^Mem:' | awk '{printf "%.1f", $3/$2 * 100}')
        if [[ $(echo "$memory_info < 85" | bc 2>/dev/null || echo "1") -eq 1 ]]; then
            echo -e "${GREEN}‚úÖ Bellek kullanƒ±mƒ±: %$memory_info${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è Y√ºksek bellek kullanƒ±mƒ±: %$memory_info${NC}"
        fi
    fi

    # Disk kullanƒ±mƒ±
    local disk_usage=$(df . | tail -1 | awk '{print $5}' | sed 's/%//')
    if [[ $disk_usage -lt 80 ]]; then
        echo -e "${GREEN}‚úÖ Disk kullanƒ±mƒ±: %$disk_usage${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Y√ºksek disk kullanƒ±mƒ±: %$disk_usage${NC}"
    fi

    # Sistem sƒ±caklƒ±ƒüƒ± (Raspberry Pi)
    if [[ -f "/sys/class/thermal/thermal_zone0/temp" ]]; then
        local temp=$(cat /sys/class/thermal/thermal_zone0/temp)
        local temp_celsius=$((temp / 1000))
        if [[ $temp_celsius -lt 70 ]]; then
            echo -e "${GREEN}‚úÖ CPU sƒ±caklƒ±ƒüƒ±: ${temp_celsius}¬∞C${NC}"
        elif [[ $temp_celsius -lt 85 ]]; then
            echo -e "${YELLOW}‚ö†Ô∏è CPU sƒ±caklƒ±ƒüƒ± y√ºksek: ${temp_celsius}¬∞C${NC}"
        else
            echo -e "${RED}‚ùå CPU a≈üƒ±rƒ± ƒ±sƒ±nmƒ±≈ü: ${temp_celsius}¬∞C${NC}"
        fi
    fi

    # Uptime
    local uptime_info=$(uptime -p 2>/dev/null || uptime)
    echo "‚è∞ Sistem √ßalƒ±≈üma s√ºresi: $uptime_info"

    echo ""
}

check_logs_status() {
    echo -e "${CYAN}üìù LOG DURUMU${NC}"
    echo "=============="

    # Log klas√∂r√º kontrol√º
    if [[ -d "logs" ]]; then
        local log_count=$(ls logs/*.log 2>/dev/null | wc -l)
        echo -e "${GREEN}‚úÖ $log_count log dosyasƒ± mevcut${NC}"

        # Log dosyasƒ± boyutlarƒ±
        echo ""
        echo "üìä Log dosyasƒ± boyutlarƒ±:"
        for log_file in logs/*.log; do
            if [[ -f "$log_file" ]]; then
                local size=$(get_file_size "$log_file")
                local basename=$(basename "$log_file")
                echo "   $basename: $size"
            fi
        done

        # Son hata kontrol√º
        local error_count=$(grep -i "error\|exception\|critical" logs/*.log 2>/dev/null | wc -l)
        if [[ $error_count -eq 0 ]]; then
            echo -e "${GREEN}‚úÖ Son zamanlarda hata bulunamadƒ±${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è $error_count hata/exception bulundu${NC}"
        fi

    else
        echo -e "${YELLOW}‚ö†Ô∏è Log klas√∂r√º bulunamadƒ±${NC}"
    fi

    echo ""
}

# Ana kontrol akƒ±≈üƒ±
case $CHECK_TYPE in
    "all")
        check_general_status
        check_battery_status
        check_gps_status
        check_sensors_status
        check_network_status
        check_system_status
        check_logs_status
        ;;
    "battery")
        check_battery_status
        ;;
    "gps")
        check_gps_status
        ;;
    "sensors")
        check_sensors_status
        ;;
    "network")
        check_network_status
        ;;
    "system")
        check_system_status
        ;;
    "logs")
        check_logs_status
        ;;
esac

# √ñneriler
echo -e "${CYAN}üí° YARALI KOMUTLAR:${NC}"
echo "  oba-logs          Log dosyalarƒ±nƒ± g√∂r√ºnt√ºle"
echo "  oba-start         Robotu ba≈ülat"
echo "  oba-test          Sistem testleri √ßalƒ±≈ütƒ±r"
echo "  oba-clean         Ge√ßici dosyalarƒ± temizle"

echo ""
echo -e "${GREEN}‚ú® Durum kontrol√º tamamlandƒ±!${NC}"

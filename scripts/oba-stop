#!/bin/bash
# -*- coding: utf-8 -*-
#
# Otonom Bahçe Asistanı (OBA) - Robot Durdurma Scripti
# ===================================================
#
# Bu script çalışan robot instance'larını güvenli bir şekilde durdurur.
#

# Proje ana dizinine git
cd "$(dirname "$0")/.."

# Renk kodları
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Değişkenler
FORCE_KILL=false
TIMEOUT=10
VERBOSE=false

# Yardım fonksiyonu
show_help() {
    echo -e "${CYAN}"
    echo "🛑 ROBOT DURDURMA ARACI"
    echo "======================="
    echo -e "${NC}"
    echo "Kullanım: oba-stop [seçenekler]"
    echo ""
    echo "Seçenekler:"
    echo "  --force, -f           Zorla durdur (SIGKILL)"
    echo "  --timeout, -t <sn>    Bekleme süresi (varsayılan: 10 saniye)"
    echo "  --verbose, -v         Detaylı çıktı"
    echo "  --help, -h            Bu yardım mesajını göster"
    echo ""
    echo "Örnekler:"
    echo "  oba-stop                  Güvenli durdurma"
    echo "  oba-stop --force          Zorla durdur"
    echo "  oba-stop --timeout 20     20 saniye bekle"
    echo "  oba-stop --verbose        Detaylı çıktı ile"
    echo ""
    exit 0
}

# Parametreleri işle
while [[ $# -gt 0 ]]; do
    case $1 in
        --force|-f)
            FORCE_KILL=true
            shift
            ;;
        --timeout|-t)
            TIMEOUT="$2"
            shift 2
            ;;
        --verbose|-v)
            VERBOSE=true
            shift
            ;;
        --help|-h)
            show_help
            ;;
        *)
            echo -e "${RED}❌ Bilinmeyen parametre: $1${NC}"
            echo "Yardım için: oba-stop --help"
            exit 1
            ;;
    esac
done

# Banner
echo -e "${CYAN}"
echo "🛑 ROBOT DURDURMA ARACI"
echo "======================="
echo -e "${NC}"

# Çalışan robot instance'larını bul
echo "🔍 Çalışan robot instance'ları taranıyor..."

# Robot process'lerini bul
ROBOT_PIDS=$(ps aux | grep -E "python.*main\.py|python.*robot\.py" | grep -v grep | awk '{print $2}')

if [[ -z "$ROBOT_PIDS" ]]; then
    echo -e "${GREEN}✅ Çalışan robot instance'ı bulunamadı${NC}"
    exit 0
fi

# Bulunan process'leri listele
echo -e "${BLUE}📋 Bulunan robot process'leri:${NC}"
ps aux | grep -E "python.*main\.py|python.*robot\.py" | grep -v grep | while read line; do
    echo "  $line"
done

echo ""
echo -e "${YELLOW}⚠️ $(echo "$ROBOT_PIDS" | wc -w) robot instance'ı bulundu${NC}"

# Onay al (force mode'da değilse)
if [[ "$FORCE_KILL" != "true" ]]; then
    echo -n "Bu process'leri durdurmak istiyor musunuz? (y/N): "
    read -r response
    if [[ ! "$response" =~ ^[Yy]$ ]]; then
        echo -e "${BLUE}ℹ️ İşlem iptal edildi${NC}"
        exit 0
    fi
fi

# Durdurma işlemi
echo -e "${BLUE}🛑 Robot instance'ları durduruluyor...${NC}"

for pid in $ROBOT_PIDS; do
    # Process bilgilerini al
    if [[ "$VERBOSE" == "true" ]]; then
        process_info=$(ps -p "$pid" -o pid,ppid,cmd --no-headers 2>/dev/null)
        if [[ -n "$process_info" ]]; then
            echo -e "${CYAN}📋 Process: $process_info${NC}"
        fi
    fi

    # Process'in hala çalışıp çalışmadığını kontrol et
    if ! kill -0 "$pid" 2>/dev/null; then
        echo -e "${YELLOW}⚠️ Process $pid zaten durdurulmuş${NC}"
        continue
    fi

    if [[ "$FORCE_KILL" == "true" ]]; then
        # Zorla durdur
        echo -e "${RED}💀 Process $pid zorla durduruluyor (SIGKILL)${NC}"
        kill -9 "$pid" 2>/dev/null
        if [[ $? -eq 0 ]]; then
            echo -e "${GREEN}✅ Process $pid zorla durduruldu${NC}"
        else
            echo -e "${RED}❌ Process $pid durdurulamadı${NC}"
        fi
    else
        # Güvenli durdurma
        echo -e "${BLUE}📤 Process $pid için SIGTERM gönderiliyor${NC}"
        kill -TERM "$pid" 2>/dev/null

        if [[ $? -eq 0 ]]; then
            echo -e "${YELLOW}⏱️ Process $pid için $TIMEOUT saniye bekleniyor${NC}"

            # Bekleme döngüsü
            wait_count=0
            while kill -0 "$pid" 2>/dev/null && [[ $wait_count -lt $TIMEOUT ]]; do
                sleep 1
                ((wait_count++))
                if [[ "$VERBOSE" == "true" ]]; then
                    echo -e "${CYAN}⏳ Bekleme: $wait_count/$TIMEOUT saniye${NC}"
                fi
            done

            # Hala çalışıyor mu kontrol et
            if kill -0 "$pid" 2>/dev/null; then
                echo -e "${YELLOW}⚠️ Process $pid SIGTERM'e yanıt vermedi, SIGKILL gönderiliyor${NC}"
                kill -9 "$pid" 2>/dev/null
                if [[ $? -eq 0 ]]; then
                    echo -e "${GREEN}✅ Process $pid zorla durduruldu${NC}"
                else
                    echo -e "${RED}❌ Process $pid durdurulamadı${NC}"
                fi
            else
                echo -e "${GREEN}✅ Process $pid güvenli bir şekilde durduruldu${NC}"
            fi
        else
            echo -e "${RED}❌ Process $pid'e sinyal gönderilemedi${NC}"
        fi
    fi
done

echo ""

# Final kontrol
echo "🔍 Final kontrol yapılıyor..."
REMAINING_PIDS=$(ps aux | grep -E "python.*main\.py|python.*robot\.py" | grep -v grep | awk '{print $2}')

if [[ -z "$REMAINING_PIDS" ]]; then
    echo -e "${GREEN}✅ Tüm robot instance'ları başarıyla durduruldu${NC}"
else
    echo -e "${RED}❌ Bazı robot instance'ları hala çalışıyor:${NC}"
    ps aux | grep -E "python.*main\.py|python.*robot\.py" | grep -v grep
    echo ""
    echo -e "${YELLOW}💡 Kalan process'ler için --force seçeneğini kullanmayı deneyin${NC}"
    exit 1
fi

echo ""
echo -e "${GREEN}🎉 Robot durdurma işlemi tamamlandı!${NC}"
echo ""
echo "💡 Faydalı komutlar:"
echo "  oba-status     Robot durumunu kontrol et"
echo "  oba-start      Robotu yeniden başlat"
echo "  oba-logs       Log dosyalarını görüntüle"
echo ""
echo "👋 Kolay gelsin! 🤖"

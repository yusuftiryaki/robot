"""
ü§ñ Bah√ße Asistanƒ± (OBA) - Ana Robot Sƒ±nƒ±fƒ±
Hacƒ± Abi'nin emeƒüi burada!

Bu sƒ±nƒ±f t√ºm robot sistemlerini koordine eder.
Durum makinesi prensibi ile √ßalƒ±≈üƒ±r - g√ºvenli ve √∂ng√∂r√ºlebilir.
"""

import asyncio
import logging
from datetime import datetime
from enum import Enum
from typing import Any, Dict

from ai.karar_verici import KararVerici
from core.guvenlik_sistemi import GuvenlikSistemi
from core.smart_config import load_smart_config
from hardware.motor_kontrolcu import MotorKontrolcu
from hardware.sensor_okuyucu import SensorOkuyucu
from navigation.konum_takipci import KonumTakipci
from navigation.rota_planlayici import RotaPlanlayici
from vision.kamera_islemci import KameraIslemci


class RobotDurumu(Enum):
    """Robot'un mevcut durumu"""
    BASLANGIC = "baslangic"
    BEKLEME = "bekleme"
    GOREV_YAPMA = "gorev_yapma"
    SARJ_ARAMA = "sarj_arama"
    SARJ_OLMA = "sarj_olma"
    ACIL_DURUM = "acil_durum"
    HATA = "hata"


class BahceRobotu:
    """
    üå± Ana Bah√ße Asistanƒ± (OBA) Sƒ±nƒ±fƒ±

    Bu sƒ±nƒ±f robotun beyni! T√ºm subsistemi koordine eder:
    - Motor kontrol√º
    - Sens√∂r okuma
    - Navigasyon
    - G√∂rev y√∂netimi
    - G√ºvenlik
    """

    def __init__(self, config_path: str = "config/robot_config.yaml"):
        """Robot'u ba≈ülat"""
        # √ñnce temel durumlarƒ± ayarla
        self.durum = RobotDurumu.BASLANGIC
        self.onceki_durum = None

        # Logger'ƒ± global setup'tan al - kendi logging setup yapmƒ±yoruz!
        self.logger = logging.getLogger("BahceRobotu")

        # Akƒ±llƒ± config y√ºkle
        self.config = self._load_config(config_path)

        # Akƒ±llƒ± config bilgilerini g√∂ster
        self._log_smart_config_info()

        self.logger.info("ü§ñ Hacƒ± Abi'nin Bah√ße Asistanƒ± (OBA) ba≈ülatƒ±lƒ±yor...")

        # Alt sistemleri ba≈ülat
        self._init_subsystems()

        # Robot durumu
        self.gorev_aktif = False
        self.sarj_gerekli = False
        self.acil_durum_aktif = False

        # Ana d√∂ng√º kontrol√º
        self.calisma_durumu = True

    def _load_config(self, config_path: str) -> Dict[str, Any]:
        """Akƒ±llƒ± konfig√ºrasyon y√ºkleme - Ortam bazlƒ±"""
        try:
            # üß† Akƒ±llƒ± config y√ºkleme - Ortam tespiti ile
            self.logger.info("üß† Akƒ±llƒ± konfig√ºrasyon y√ºkleniyor...")
            config = load_smart_config(config_path)

            # Ortam bilgilerini logla
            runtime_info = config.get("runtime", {})
            env_type = runtime_info.get("environment_type", "unknown")
            is_sim = runtime_info.get("is_simulation", False)

            self.logger.info(f"üåç Tespit edilen ortam: {env_type}")
            self.logger.info(f"üéÆ Sim√ºlasyon modu: {'Evet' if is_sim else 'Hayƒ±r'}")

            # Donanƒ±m yeteneklerini logla
            capabilities = runtime_info.get("capabilities", {})
            active_caps = [cap for cap, available in capabilities.items() if available]
            if active_caps:
                self.logger.info(f"üîß Aktif donanƒ±m: {', '.join(active_caps)}")

            return config

        except Exception as e:
            self.logger.error(f"‚ùå Akƒ±llƒ± config y√ºkleme hatasƒ±: {e}")
            self.logger.warning("‚ö†Ô∏è Varsayƒ±lan config'e geri d√∂nd√º")
            return self._get_default_config()

    def _get_default_config(self) -> Dict[str, Any]:
        """Varsayƒ±lan konfig√ºrasyon - Akƒ±llƒ± config ba≈üarƒ±sƒ±z olursa"""
        self.logger.warning("‚ö†Ô∏è Akƒ±llƒ± config ba≈üarƒ±sƒ±z, varsayƒ±lan ayarlar kullanƒ±lƒ±yor")
        return {
            "robot": {
                "name": "OBA_Emergency",
                "version": "1.0.0",
                "debug_mode": True
            },
            "simulation": {
                "enabled": True  # G√ºvenli varsayƒ±lan
            },
            "motors": {
                "type": "simulation"  # G√ºvenli varsayƒ±lan
            },
            "sensors": {
                "mock_enabled": True  # G√ºvenli varsayƒ±lan
            },
            "logging": {
                "level": "INFO",
                "console": {"enabled": True},
                "file": {"enabled": True, "path": "logs/robot.log"}
            },
            "web_interface": {
                "enabled": True,
                "host": "127.0.0.1",
                "port": 5000,
                "debug": True
            },
            "runtime": {
                "environment_type": "unknown",
                "is_simulation": True,
                "is_hardware": False,
                "capabilities": {},
                "detected_at": "emergency_fallback"
            }
        }

    def _init_subsystems(self):
        """Alt sistemleri ba≈ülat"""
        self.logger.info("üîß Alt sistemler ba≈ülatƒ±lƒ±yor...")

        # Hardware - g√ºvenli ba≈ülatma
        try:
            self.motor_kontrolcu = MotorKontrolcu(
                self.config.get("hardware", {}).get("motors", {}))
            self.logger.info("‚úÖ Motor kontrolc√º hazƒ±r")
        except Exception as e:
            self.logger.error(f"‚ùå Motor kontrolc√º hatasƒ±: {e}")
            self.motor_kontrolcu = None

        try:
            self.sensor_okuyucu = SensorOkuyucu(
                self.config.get("hardware", {}).get("sensors", {}),
                smart_config=self.config)
            self.logger.info("‚úÖ Sens√∂r okuyucu hazƒ±r")
        except Exception as e:
            self.logger.error(f"‚ùå Sens√∂r okuyucu hatasƒ±: {e}")
            self.sensor_okuyucu = None

        # Navigation - g√ºvenli ba≈ülatma
        try:
            self.konum_takipci = KonumTakipci(
                self.config.get("navigation", {}))
            self.logger.info("‚úÖ Konum takip√ßi hazƒ±r")
        except Exception as e:
            self.logger.error(f"‚ùå Konum takip√ßi hatasƒ±: {e}")
            self.konum_takipci = None

        try:
            self.rota_planlayici = RotaPlanlayici(
                self.config.get("navigation", {}))
            self.logger.info("‚úÖ Rota planlayƒ±cƒ± hazƒ±r")
        except Exception as e:
            self.logger.error(f"‚ùå Rota planlayƒ±cƒ± hatasƒ±: {e}")
            self.rota_planlayici = None

        # Vision & AI - g√ºvenli ba≈ülatma
        try:
            self.kamera_islemci = KameraIslemci(self.config.get(
                "hardware", {}).get("sensors", {}).get("camera", {}))
            self.logger.info("‚úÖ Kamera i≈ülemci hazƒ±r")
        except Exception as e:
            self.logger.error(f"‚ùå Kamera i≈ülemci hatasƒ±: {e}")
            self.kamera_islemci = None

        try:
            self.karar_verici = KararVerici(self.config.get("ai", {}))
            self.logger.info("‚úÖ Karar verici hazƒ±r")
        except Exception as e:
            self.logger.error(f"‚ùå Karar verici hatasƒ±: {e}")
            self.karar_verici = None

        # Security - g√ºvenli ba≈ülatma
        try:
            self.guvenlik_sistemi = GuvenlikSistemi(
                self.config.get("safety", {}))
            self.logger.info("‚úÖ G√ºvenlik sistemi hazƒ±r")
        except Exception as e:
            self.logger.error(f"‚ùå G√ºvenlik sistemi hatasƒ±: {e}")
            self.guvenlik_sistemi = None

        # Ba≈üarƒ±lƒ± ba≈ülatƒ±lan sistem sayƒ±sƒ±
        active_systems = sum(1 for system in [
            self.motor_kontrolcu, self.sensor_okuyucu, self.konum_takipci,
            self.rota_planlayici, self.kamera_islemci, self.karar_verici,
            self.guvenlik_sistemi
        ] if system is not None)

        self.logger.info(f"‚úÖ {active_systems}/7 alt sistem hazƒ±r!")

        # Kritik sistemler eksikse uyarƒ± ver
        if self.motor_kontrolcu is None or self.sensor_okuyucu is None:
            self.logger.warning("‚ö†Ô∏è Kritik sistemler eksik, sƒ±nƒ±rlƒ± mod aktif!")
            self.durum = RobotDurumu.BEKLEME
        else:
            self.logger.info("üöÄ T√ºm kritik sistemler hazƒ±r!")

    async def ana_dongu(self):
        """
        üîÑ Robot'un ana d√∂ng√ºs√º

        Bu fonksiyon robot'un beyninin ana d√∂ng√ºs√º.
        Durum makinesine g√∂re hangi i≈ülemlerin yapƒ±lacaƒüƒ±na karar verir.
        """
        self.logger.info("üöÄ Ana d√∂ng√º ba≈ülatƒ±ldƒ±!")

        while self.calisma_durumu:
            try:
                # Sens√∂r verilerini oku
                sensor_data = await self._sensor_verilerini_oku()

                # G√ºvenlik kontrol√º
                guvenlik_durumu = None
                if self.guvenlik_sistemi is not None:
                    guvenlik_durumu = self.guvenlik_sistemi.kontrol_et(sensor_data)

                if guvenlik_durumu and guvenlik_durumu.acil_durum:
                    await self._acil_durum_isle(guvenlik_durumu.sebep)
                    continue

                # Konum g√ºncelle
                if self.konum_takipci is not None:
                    await self.konum_takipci.konum_guncelle(sensor_data)

                # Durum makinesine g√∂re i≈ülem yap
                await self._durum_makinesini_isle(sensor_data)

                # Kƒ±sa bekleme
                await asyncio.sleep(0.1)  # 10 Hz ana d√∂ng√º

            except asyncio.CancelledError:
                self.logger.info("üõë Ana d√∂ng√º iptal edildi")
                break
            except Exception as e:
                self.logger.error(f"‚ùå Ana d√∂ng√º hatasƒ±: {e}")
                await self._hata_isle(str(e))
                await asyncio.sleep(1)

        self.logger.info("üõë Ana d√∂ng√º temiz ≈üekilde sonlandƒ±")

    async def _sensor_verilerini_oku(self) -> Dict[str, Any]:
        """T√ºm sens√∂rlerden veri oku"""
        if self.sensor_okuyucu is None:
            # Sim√ºlasyon verisi d√∂nd√ºr
            return {
                "timestamp": datetime.now().isoformat(),
                "battery": {"voltage": 12.5, "current": 1.2, "percentage": 85},
                "sensors": {"ultrasonic": {"distance": 50.0}, "bump": False},
                "imu": {"roll": 0.0, "pitch": 0.0, "yaw": 0.0},
                "gps": {"latitude": 39.9334, "longitude": 32.8597, "fix": False}
            }
        return await self.sensor_okuyucu.tum_verileri_oku()

    async def sensor_verilerini_al(self) -> Dict[str, Any]:
        """T√ºm sens√∂rlerden veri al (public interface)"""
        return await self._sensor_verilerini_oku()

    async def _durum_makinesini_isle(self, sensor_data: Dict[str, Any]):
        """
        üß† Durum Makinesinin Beyni

        Robot'un ne yapacaƒüƒ±na durum makinesine g√∂re karar verir.
        """
        self.logger.debug(f"üîÑ Durum: {self.durum.value}")

        if self.durum == RobotDurumu.BASLANGIC:
            await self._baslangic_durumu()

        elif self.durum == RobotDurumu.BEKLEME:
            await self._bekleme_durumu(sensor_data)

        elif self.durum == RobotDurumu.GOREV_YAPMA:
            await self._gorev_yapma_durumu(sensor_data)

        elif self.durum == RobotDurumu.SARJ_ARAMA:
            await self._sarj_arama_durumu(sensor_data)

        elif self.durum == RobotDurumu.SARJ_OLMA:
            await self._sarj_olma_durumu(sensor_data)

        elif self.durum == RobotDurumu.ACIL_DURUM:
            await self._acil_durum_bekle()

        elif self.durum == RobotDurumu.HATA:
            await self._hata_durumu()

    async def _baslangic_durumu(self):
        """üèÅ Robot ba≈ülatƒ±ldƒ±ƒüƒ±nda yapƒ±lan i≈ülemler"""
        self.logger.info("üèÅ Robot ba≈ülatƒ±lƒ±yor...")

        # Sistem kontrol√º - None kontrol√º ile g√ºvenli √ßalƒ±≈üma
        if self.motor_kontrolcu is not None:
            await self.motor_kontrolcu.test_et()
        if self.sensor_okuyucu is not None:
            await self.sensor_okuyucu.kalibrasyon_yap()

        # ƒ∞lk konum belirle
        if self.konum_takipci is not None:
            await self.konum_takipci.ilk_konum_belirle()

        self.durum_degistir(RobotDurumu.BEKLEME)
        self.logger.info("‚úÖ Robot hazƒ±r! G√∂rev bekliyor.")

    async def _bekleme_durumu(self, sensor_data: Dict[str, Any]):
        """‚è∏Ô∏è Robot beklemede - g√∂rev veya ≈üarj kontrol√º"""
        batarya_seviye = sensor_data.get("batarya", {}).get("seviye", 100)

        if batarya_seviye < self.config.get("missions", {}).get("charging", {}).get("battery_low_threshold", 20):
            self.durum_degistir(RobotDurumu.SARJ_ARAMA)
            return

        # G√∂rev var mƒ± kontrol et
        if self.gorev_aktif:
            self.durum_degistir(RobotDurumu.GOREV_YAPMA)

    async def _gorev_yapma_durumu(self, sensor_data: Dict[str, Any]):
        """üå± Ana g√∂rev - bi√ßme i≈ülemi"""
        # Batarya kontrol√º
        batarya_seviye = sensor_data.get("batarya", {}).get("seviye", 100)
        if batarya_seviye < self.config.get("missions", {}).get("charging", {}).get("battery_low_threshold", 20):
            self.durum_degistir(RobotDurumu.SARJ_ARAMA)
            return

        # Kamera ile engel kontrol√º
        kamera_data = await self.kamera_islemci.engel_analiz_et()

        # AI karar verme
        karar = await self.karar_verici.next_action_belirle(sensor_data, kamera_data)

        # Motor hareketini uygula - Dict'i HareketKomut'a √ßevir
        from hardware.motor_kontrolcu import HareketKomut
        hareket_komut = HareketKomut(
            linear_hiz=karar.hareket.get("linear", 0.0),
            angular_hiz=karar.hareket.get("angular", 0.0)
        )
        await self.motor_kontrolcu.hareket_uygula(hareket_komut)

        # Fƒ±r√ßalarƒ± √ßalƒ±≈ütƒ±r
        await self.motor_kontrolcu.fircalari_calistir(True)

    async def _sarj_arama_durumu(self, sensor_data: Dict[str, Any]):
        """üîç ≈ûarj istasyonunu ara ve y√∂nel"""
        self.logger.info("üîã ≈ûarj istasyonu aranƒ±yor...")

        # Fƒ±r√ßalarƒ± durdur - enerji tasarrufu
        await self.motor_kontrolcu.fircalari_calistir(False)

        # ≈ûarj istasyonuna y√∂nelme rotasƒ± hesapla
        sarj_rota = await self.rota_planlayici.sarj_istasyonu_rotasi()

        if sarj_rota:
            await self.motor_kontrolcu.hareket_uygula(sarj_rota)

            # ≈ûarj istasyonu g√∂r√ºn√ºr m√º?
            kamera_data = await self.kamera_islemci.sarj_istasyonu_ara()
            if kamera_data.get("sarj_istasyonu_gorunur"):
                self.durum_degistir(RobotDurumu.SARJ_OLMA)

    async def _sarj_olma_durumu(self, sensor_data: Dict[str, Any]):
        """üîå ≈ûarj istasyonunda ≈üarj ol"""
        self.logger.info("üîå ≈ûarj oluyor...")

        # Motorlarƒ± durdur
        await self.motor_kontrolcu.durdur()

        batarya_seviye = sensor_data.get("batarya", {}).get("seviye", 0)
        hedef_seviye = self.config.get("missions", {}).get(
            "charging", {}).get("battery_full_threshold", 95)

        if batarya_seviye >= hedef_seviye:
            self.logger.info("üîã ≈ûarj tamamlandƒ±!")
            self.durum_degistir(RobotDurumu.BEKLEME)

    async def _acil_durum_isle(self, sebep: str):
        """üö® Acil durum i≈üle"""
        self.logger.warning(f"üö® ACƒ∞L DURUM: {sebep}")

        self.onceki_durum = self.durum
        self.durum = RobotDurumu.ACIL_DURUM

        # Hemen durdur
        await self.motor_kontrolcu.acil_durdur()

    async def _acil_durum_bekle(self):
        """üö® Acil durumda bekle"""
        # G√ºvenlik sistemi temizlenene kadar bekle
        if not self.guvenlik_sistemi.acil_durum_aktif:
            self.logger.info("‚úÖ Acil durum temizlendi")
            self.durum = self.onceki_durum or RobotDurumu.BEKLEME

    async def _hata_isle(self, hata_mesaji: str):
        """‚ùå Hata durumunu i≈üle"""
        self.logger.error(f"‚ùå Hata: {hata_mesaji}")
        self.durum = RobotDurumu.HATA
        await self.motor_kontrolcu.durdur()

    async def _hata_durumu(self):
        """‚ùå Hata durumunda bekle"""
        await asyncio.sleep(5)  # 5 saniye bekle
        self.logger.info("üîÑ Hata durumundan √ßƒ±kƒ±lƒ±yor...")
        self.durum = RobotDurumu.BEKLEME

    def durum_degistir(self, yeni_durum: RobotDurumu):
        """Durum deƒüi≈ütir ve logla"""
        self.onceki_durum = self.durum
        self.durum = yeni_durum
        self.logger.info(
            f"üîÑ Durum deƒüi≈üti: {self.onceki_durum.value} ‚Üí {yeni_durum.value}")

    def gorev_baslat(self):
        """Dƒ±≈üarƒ±dan g√∂rev ba≈ülatma"""
        self.gorev_aktif = True
        self.logger.info("üéØ G√∂rev ba≈ülatƒ±ldƒ±!")

    def gorev_durdur(self):
        """Dƒ±≈üarƒ±dan g√∂rev durdurma"""
        self.gorev_aktif = False
        self.durum_degistir(RobotDurumu.BEKLEME)
        self.logger.info("‚è∏Ô∏è G√∂rev durduruldu!")

    def acil_durdur(self):
        """Dƒ±≈üarƒ±dan acil durdurma"""
        self.acil_durum_aktif = True
        self.logger.warning("üö® Acil durdurma aktif!")

    async def kapat(self):
        """Robot'u g√ºvenli ≈üekilde kapat"""
        self.logger.info("üëã Robot kapatƒ±lƒ±yor...")
        self.calisma_durumu = False
        await self.motor_kontrolcu.durdur()
        self.logger.info("‚úÖ Robot g√ºvenli ≈üekilde kapatƒ±ldƒ±!")

    def get_durum_bilgisi(self) -> Dict[str, Any]:
        """Robot durumu hakkƒ±nda bilgi al"""
        return {
            "durum": self.durum.value,
            "onceki_durum": self.onceki_durum.value if self.onceki_durum else None,
            "gorev_aktif": self.gorev_aktif,
            "acil_durum": self.acil_durum_aktif,
            "zaman": datetime.now().isoformat()
        }

    def _log_smart_config_info(self):
        """Akƒ±llƒ± config bilgilerini logla"""
        runtime_info = self.config.get("runtime", {})

        # Temel bilgileri logla
        self.logger.info("=" * 50)
        self.logger.info("üß† AKILLI KONFƒ∞G√úRASYON Bƒ∞LGƒ∞LERƒ∞")
        self.logger.info("=" * 50)

        # Ortam bilgisi
        env_type = runtime_info.get("environment_type", "unknown")
        is_sim = runtime_info.get("is_simulation", False)
        is_hardware = runtime_info.get("is_hardware", False)

        self.logger.info(f"üåç Ortam: {env_type}")
        self.logger.info(f"üéÆ Sim√ºlasyon: {'‚úÖ Aktif' if is_sim else '‚ùå Pasif'}")
        self.logger.info(f"‚öôÔ∏è Donanƒ±m: {'‚úÖ Aktif' if is_hardware else '‚ùå Pasif'}")

        # Donanƒ±m yetenekleri
        capabilities = runtime_info.get("capabilities", {})
        if capabilities:
            self.logger.info("üîß Donanƒ±m Yetenekleri:")
            for cap_name, available in capabilities.items():
                status = "‚úÖ" if available else "‚ùå"
                self.logger.info(f"   {status} {cap_name.upper()}")

        # Config dosya bilgileri
        motor_type = self.config.get("motors", {}).get("type", "unknown")
        mock_sensors = self.config.get("sensors", {}).get("mock_enabled", False)
        web_port = self.config.get("web_interface", {}).get("port", 0)

        self.logger.info(f"üöó Motor Tipi: {motor_type}")
        self.logger.info(f"üì° Sahte Sens√∂rler: {'‚úÖ Aktif' if mock_sensors else '‚ùå Pasif'}")
        self.logger.info(f"üåê Web Port: {web_port}")

        self.logger.info("=" * 50)

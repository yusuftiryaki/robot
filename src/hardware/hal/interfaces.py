"""
üîß Hardware Abstraction Layer (HAL) - Interfaces
Hacƒ± Abi'nin HAL pattern implementasyonu burada!

Bu mod√ºl, donanƒ±m abstraction layer'ƒ±nƒ±n aray√ºzlerini tanƒ±mlar.
Ger√ßek donanƒ±m ve sim√ºlasyon implementasyonlarƒ± bu aray√ºzleri kullanƒ±r.
"""

from abc import ABC, abstractmethod
from dataclasses import dataclass
from typing import Any, Dict, Optional


@dataclass
class SensorVeri:
    """Temel sens√∂r verisi"""
    timestamp: str
    gecerli: bool
    hata_mesaji: Optional[str] = None


@dataclass
class IMUVeri(SensorVeri):
    """IMU sens√∂r verisi"""
    ivme_x: float = 0.0
    ivme_y: float = 0.0
    ivme_z: float = 0.0
    acisal_hiz_x: float = 0.0
    acisal_hiz_y: float = 0.0
    acisal_hiz_z: float = 0.0
    roll: float = 0.0
    pitch: float = 0.0
    yaw: float = 0.0
    sicaklik: float = 0.0


@dataclass
class GPSVeri(SensorVeri):
    """GPS sens√∂r verisi"""
    enlem: float = 0.0
    boylam: float = 0.0
    yukseklik: float = 0.0
    uydu_sayisi: int = 0
    fix_kalitesi: int = 0
    hiz: float = 0.0
    y√∂n: float = 0.0


@dataclass
class GucVeri(SensorVeri):
    """G√º√ß sens√∂r verisi"""
    voltaj: float = 0.0
    akim: float = 0.0
    guc: float = 0.0
    batarya_seviyesi: float = 0.0  # %0-100


@dataclass
class TamponVeri(SensorVeri):
    """Tampon sens√∂r verisi"""
    basildi: bool = False


@dataclass
class EnkoderVeri(SensorVeri):
    """Encoder sens√∂r verisi"""
    sol_teker: int = 0
    sag_teker: int = 0


@dataclass
class AcilDurmaVeri(SensorVeri):
    """Acil durdurma butonu verisi"""
    aktif: bool = False


@dataclass
class MotorDurumuVeri:
    """Motor durumu verisi"""
    sol_hiz: float = 0.0      # -1.0 ile 1.0 arasƒ±
    sag_hiz: float = 0.0      # -1.0 ile 1.0 arasƒ±
    ana_firca: bool = False
    sol_firca: bool = False
    sag_firca: bool = False
    fan: bool = False
    motorlar_aktif: bool = False
    dogrusal_hiz: float = 0.0  # m/s
    acisal_hiz: float = 0.0    # rad/s
    saglikli: bool = True       # Motor sistemi saƒülƒ±klƒ± mƒ±?


# === HAL Interfaces ===

class MotorInterface(ABC):
    """Motor kontrol aray√ºz√º"""

    @abstractmethod
    async def baslat(self) -> bool:
        """Motor sistemini ba≈ülat"""
        pass

    @abstractmethod
    async def durdur(self):
        """Motor sistemini durdur"""
        pass

    @abstractmethod
    async def tekerlek_hiz_ayarla(self, sol_hiz: float, sag_hiz: float):
        """Tekerlek motorlarƒ±nƒ±n hƒ±zƒ±nƒ± ayarla (-1.0 ile 1.0 arasƒ±)"""
        pass

    @abstractmethod
    async def firca_kontrol(self, ana: bool, sol: bool, sag: bool):
        """Fƒ±r√ßa motorlarƒ±nƒ± kontrol et"""
        pass

    @abstractmethod
    async def fan_kontrol(self, aktif: bool):
        """Fan motorunu kontrol et"""
        pass

    @abstractmethod
    async def acil_durdur(self):
        """T√ºm motorlarƒ± acil olarak durdur"""
        pass

    @abstractmethod
    def motor_durumu_al(self) -> MotorDurumuVeri:
        """Mevcut motor durumunu al"""
        pass

    @abstractmethod
    def saglikli_mi(self) -> bool:
        """Motor sistemi saƒülƒ±klƒ± mƒ±?"""
        pass


class SensorInterface(ABC):
    """Temel sens√∂r aray√ºz√º"""

    @abstractmethod
    async def baslat(self) -> bool:
        """Sens√∂r√º ba≈ülat"""
        pass

    @abstractmethod
    async def durdur(self):
        """Sens√∂r√º durdur"""
        pass

    @abstractmethod
    async def veri_oku(self) -> Optional[SensorVeri]:
        """Sens√∂rden veri oku"""
        pass

    @abstractmethod
    def saglikli_mi(self) -> bool:
        """Sens√∂r saƒülƒ±klƒ± mƒ±?"""
        pass


class IMUInterface(SensorInterface):
    """IMU sens√∂r aray√ºz√º"""

    @abstractmethod
    async def veri_oku(self) -> Optional[IMUVeri]:
        """IMU verisi oku"""
        pass

    @abstractmethod
    async def kalibrasyon_yap(self) -> bool:
        """IMU kalibrasyonu yap"""
        pass


class GPSInterface(SensorInterface):
    """GPS sens√∂r aray√ºz√º"""

    @abstractmethod
    async def veri_oku(self) -> Optional[GPSVeri]:
        """GPS verisi oku"""
        pass


class GucInterface(SensorInterface):
    """G√º√ß sens√∂r aray√ºz√º"""

    @abstractmethod
    async def veri_oku(self) -> Optional[GucVeri]:
        """G√º√ß verisi oku"""
        pass


class TamponInterface(SensorInterface):
    """Tampon sens√∂r aray√ºz√º"""

    @abstractmethod
    async def veri_oku(self) -> Optional[TamponVeri]:
        """Tampon verisi oku"""
        pass


class EnkoderInterface(SensorInterface):
    """Encoder sens√∂r aray√ºz√º"""

    @abstractmethod
    async def veri_oku(self) -> Optional[EnkoderVeri]:
        """Encoder verisi oku"""
        pass


class AcilDurmaInterface(SensorInterface):
    """Acil durdurma butonu aray√ºz√º"""

    @abstractmethod
    async def veri_oku(self) -> Optional[AcilDurmaVeri]:
        """Acil durdurma verisi oku"""
        pass


class HardwareFactory(ABC):
    """Donanƒ±m fabrika aray√ºz√º"""

    @abstractmethod
    def imu_olustur(self, config: Dict[str, Any]) -> IMUInterface:
        """IMU sens√∂r√º olu≈ütur"""
        pass

    @abstractmethod
    def gps_olustur(self, config: Dict[str, Any]) -> GPSInterface:
        """GPS sens√∂r√º olu≈ütur"""
        pass

    @abstractmethod
    def guc_olustur(self, config: Dict[str, Any]) -> GucInterface:
        """G√º√ß sens√∂r√º olu≈ütur"""
        pass

    @abstractmethod
    def tampon_olustur(self, config: Dict[str, Any]) -> TamponInterface:
        """Tampon sens√∂r√º olu≈ütur"""
        pass

    @abstractmethod
    def enkoder_olustur(self, config: Dict[str, Any]) -> EnkoderInterface:
        """Encoder sens√∂r√º olu≈ütur"""
        pass

    @abstractmethod
    def acil_durma_olustur(self, config: Dict[str, Any]) -> AcilDurmaInterface:
        """Acil durdurma butonu olu≈ütur"""
        pass

    @abstractmethod
    def motor_olustur(self, config: Dict[str, Any]) -> MotorInterface:
        """Motor kontrolc√ºs√º olu≈ütur"""
        pass

"""
üè≠ Kamera Factory - HAL Pattern Implementation
Hacƒ± Abi'nin temiz kamera factory'si!

Bu factory, environment'a g√∂re doƒüru kamera implementasyonunu se√ßer.
SOLID prensiplerine uygun, temiz factory pattern.
"""

import logging
from typing import Any, Dict

from .fiziksel_kamera import FizikselKamera
from .kamera_interface import KameraInterface
from .simulasyon_kamerasi import SimulasyonKamerasi


class KameraFactory:
    """
    üè≠ Kamera Factory Class

    Environment'a g√∂re doƒüru kamera implementasyonunu olu≈üturur.
    Sim√ºlasyon/Fiziksel kamera arasƒ±nda otomatik se√ßim yapar.
    """

    @staticmethod
    def create_kamera(config: Dict[str, Any]) -> KameraInterface:
        """
        üéØ Kamera implementasyonu olu≈ütur

        Args:
            config: Kamera konfig√ºrasyonu

        Returns:
            KameraInterface: Doƒüru kamera implementasyonu

        Raises:
            ValueError: Desteklenmeyen kamera tipi
        """
        logger = logging.getLogger("KameraFactory")

        # Config'ten kamera tipini al
        kamera_tipi = config.get("type", "auto")

        # Auto detection
        if kamera_tipi == "auto":
            kamera_tipi = KameraFactory._detect_kamera_tipi()
            logger.info(f"üîç Otomatik tespit: {kamera_tipi} kamera")

        # Kamera implementasyonunu olu≈ütur
        if kamera_tipi == "simulation":
            logger.info("üéÆ Sim√ºlasyon kamerasƒ± olu≈üturuluyor...")
            return SimulasyonKamerasi(config)

        elif kamera_tipi == "hardware":
            logger.info("üì∑ Fiziksel kamera olu≈üturuluyor...")
            return FizikselKamera(config)

        else:
            raise ValueError(f"‚ùå Desteklenmeyen kamera tipi: {kamera_tipi}")

    @staticmethod
    def _detect_kamera_tipi() -> str:
        """
        üîç Otomatik kamera tipi tespiti

        Returns:
            str: "simulation" veya "hardware"
        """
        try:
            # Picamera2 availability kontrol√º
            import importlib.util

            # Picamera2 mod√ºl√º mevcut mu?
            picamera2_spec = importlib.util.find_spec("picamera2")
            if picamera2_spec is None:
                return "simulation"

            # Kamera aygƒ±tƒ± kontrol√º
            import os
            if os.path.exists("/dev/video0"):
                return "hardware"
            else:
                return "simulation"

        except Exception:
            # Herhangi bir hata durumunda sim√ºlasyon
            return "simulation"

    @staticmethod
    def get_available_kamera_tipleri() -> list:
        """
        üìã Mevcut kamera tiplerini listele

        Returns:
            list: Desteklenen kamera tipleri
        """
        available = ["simulation"]  # Her zaman mevcut

        try:
            import importlib.util
            import os

            # Picamera2 mod√ºl√º mevcut mu?
            picamera2_spec = importlib.util.find_spec("picamera2")
            if picamera2_spec is not None and os.path.exists("/dev/video0"):
                available.append("hardware")
        except Exception:
            pass

        return available

    @staticmethod
    def validate_config(config: Dict[str, Any]) -> bool:
        """
        ‚úÖ Kamera config'ini doƒürula

        Args:
            config: Kontrol edilecek konfig√ºrasyon

        Returns:
            bool: Config ge√ßerli mi?
        """
        logger = logging.getLogger("KameraFactory")

        try:
            # Zorunlu alanlar
            required_fields = ["width", "height", "fps"]
            for field in required_fields:
                if field not in config:
                    logger.error(f"‚ùå Config'te eksik alan: {field}")
                    return False

            # Deƒüer kontrolleri
            if config["width"] <= 0 or config["height"] <= 0:
                logger.error("‚ùå Ge√ßersiz √ß√∂z√ºn√ºrl√ºk deƒüerleri")
                return False

            if config["fps"] <= 0:
                logger.error("‚ùå Ge√ßersiz FPS deƒüeri")
                return False

            # Kamera tipi kontrol√º
            kamera_tipi = config.get("type", "auto")
            if kamera_tipi not in ["auto", "simulation", "hardware"]:
                logger.error(f"‚ùå Ge√ßersiz kamera tipi: {kamera_tipi}")
                return False

            logger.info("‚úÖ Kamera config ge√ßerli")
            return True

        except Exception as e:
            logger.error(f"‚ùå Config doƒürulama hatasƒ±: {e}")
            return False

"""
üîß Motor Kontrolc√º Factory - HAL Pattern Kullanƒ±mƒ±
Hacƒ± Abi'nin motor kontrolc√º factory'si!

Bu mod√ºl, environment'a g√∂re doƒüru HAL implementasyonunu se√ßer
ve motor kontrolc√ºy√º proper ≈üekilde ba≈ülatƒ±r.
"""

import logging
from typing import Any, Dict

from .hal.hardware import GercekHardwareFactory
from .hal.interfaces import HardwareFactory
from .hal.simulation import SimulasyonHardwareFactory
from .motor_kontrolcu import MotorKontrolcu


class MotorKontrolcuFactory:
    """
    Motor kontrolc√º fabrikasƒ±

    Environment manager'a g√∂re doƒüru HAL implementasyonunu se√ßer.
    """

    def __init__(self, environment_manager):
        self.logger = logging.getLogger("MotorKontrolcuFactory")
        self.environment_manager = environment_manager
        self.is_simulation = environment_manager.is_simulation_mode

        # HAL Factory'yi se√ß
        if self.is_simulation:
            self.hal_factory: HardwareFactory = SimulasyonHardwareFactory()
            self.logger.info("üéÆ Sim√ºlasyon HAL factory se√ßildi")
        else:
            self.hal_factory: HardwareFactory = GercekHardwareFactory()
            self.logger.info("‚öôÔ∏è Ger√ßek donanƒ±m HAL factory se√ßildi")

    def motor_kontrolcu_olustur(self, motor_config: Dict[str, Any]) -> MotorKontrolcu:
        """
        Motor kontrolc√º olu≈ütur

        Args:
            motor_config: Motor konfig√ºrasyon ayarlarƒ±

        Returns:
            MotorKontrolcu: HAL pattern kullanaran motor kontrolc√º
        """
        try:
            # HAL implementasyonunu olu≈ütur
            motor_hal = self.hal_factory.motor_olustur(motor_config)

            # Motor kontrolc√ºy√º olu≈ütur
            motor_kontrolcu = MotorKontrolcu(motor_hal, motor_config)

            self.logger.info(f"‚úÖ Motor kontrolc√º olu≈üturuldu (Mod: {'Sim√ºlasyon' if self.is_simulation else 'Ger√ßek'})")
            return motor_kontrolcu

        except Exception as e:
            self.logger.error(f"‚ùå Motor kontrolc√º olu≈üturma hatasƒ±: {e}")
            raise


# Convenience function for easy usage
def create_motor_kontrolcu(environment_manager, motor_config: Dict[str, Any]) -> MotorKontrolcu:
    """
    Motor kontrolc√º olu≈üturmak i√ßin kolaylƒ±k fonksiyonu

    Args:
        environment_manager: Ortam y√∂neticisi
        motor_config: Motor konfig√ºrasyonu

    Returns:
        MotorKontrolcu: Hazƒ±r motor kontrolc√º
    """
    factory = MotorKontrolcuFactory(environment_manager)
    return factory.motor_kontrolcu_olustur(motor_config)
